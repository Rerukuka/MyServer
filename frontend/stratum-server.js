const net = require("net");
const http = require("http");

const PORT = 3333;
const RPC_HOST = "127.0.0.1";
const RPC_PORT = 3001;

const server = net.createServer((socket) => {
  console.log("üîå ASIC –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:", socket.remoteAddress);

  socket.on("data", (data) => {
    console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ASIC:", data.toString());

    try {
      const message = JSON.parse(data.toString());
      if (message.method === "mining.subscribe") {
        socket.write(JSON.stringify({
          id: message.id,
          result: [["mining.set_difficulty", "b4b6693b"], ["mining.notify", "b4b6693b"]],
          error: null
        }) + "\n");
      }

      if (message.method === "mining.authorize") {
        socket.write(JSON.stringify({
          id: message.id,
          result: true,
          error: null
        }) + "\n");
      }

      if (message.method === "mining.submit") {
        console.log("üß± –•–µ—à –æ—Ç ASIC:", JSON.stringify(message.params));
        socket.write(JSON.stringify({ id: message.id, result: true, error: null }) + "\n");
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", e.message);
    }
  });

  socket.on("end", () => {
    console.log("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ ASIC");
  });
});

server.listen(PORT, () => {
  console.log(`‚úÖ Stratum-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`);
  console.log("üîÅ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é ASIC");
});

server.on("error", (err) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
});
